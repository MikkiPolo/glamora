# AI-—Å—Ç–∏–ª–∏—Å—Ç –±–æ—Ç –Ω–∞ Python —á–µ—Ä–µ–∑ polling + .env + –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ + –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ/–≥–æ–ª–æ—Å–∞ + wardrobe/get_weather
import ast
import os
import time
import json
import openai
import requests
import csv
import base64
import re
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ASSISTANT_ID = os.getenv("ASSISTANT_ID")
ADMIN_USER_ID = int(os.getenv("ADMIN_USER_ID"))
SYSTEM_PROMPT = os.getenv("SYSTEM_PROMPT")

openai.api_key = OPENAI_API_KEY

THREADS = {}  # user_id -> thread_id
OFFSET = None
LOG_FILE = os.path.join(os.path.dirname(__file__), "log.csv")
WARDROBE_FILE = "wardrobe.json"
PENDING_ACTIONS = {}  # user_id -> action (e.g. "awaiting_add_photo")
CACHED_PHOTOS = {}    # user_id -> image path for reprocessing

CATEGORIES = [
    "–í–ï–†–•–ù–Ø–Ø –û–î–ï–ñ–î–ê", "–ü–ò–î–ñ–ê–ö", "–Æ–ë–ö–ê", "–ü–õ–ê–¢–¨–ï", "–®–¢–ê–ù–´", "–ö–û–§–¢–ê", "–ñ–ò–õ–ï–¢",
    "–†–£–ë–ê–®–ö–ê", "–¢–û–ü–´", "–§–£–¢–ë–û–õ–ö–ê", "–°–£–ú–ö–ê", "–û–ë–£–í–¨", "–£–ö–†–ê–®–ï–ù–ò–Ø –ò –ê–ö–°–ï–°–°–£–ê–†–´"
]

# ===================== –£—Ç–∏–ª–∏—Ç—ã =====================

def log_message(user_id, username, text, event_type="INFO"):
    with open(LOG_FILE, mode='a', newline='', encoding='utf-8') as file:
        writer = csv.writer(file)
        writer.writerow([time.strftime("%Y-%m-%d %H:%M:%S"), user_id, username, event_type, text])

def clean_and_parse_json(raw):
    # –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "\"{\"–∫–∞—Ç–µ–≥–æ—Ä–∏—è\":...}\"", —É–±–∏—Ä–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏
    if isinstance(raw, str):
        if not raw:
            raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç GPT")
        if raw.startswith('"') and raw.endswith('"'):
            raw = ast.literal_eval(raw)  # –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        raw = raw.replace('""', '"')  # –∑–∞–º–µ–Ω—è–µ–º –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏

        # –£–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫–∏ ```json
        raw = re.sub(r'^```(?:json)?\s*|\s*```$', '', raw.strip())

        return json.loads(raw)

    # –µ—Å–ª–∏ —É–∂–µ dict ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
    elif isinstance(raw, dict):
        return raw

    else:
        raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")



def parse_raw_response(text):
    text = text.strip()
    # –£–±–∏—Ä–∞–µ–º –æ–±—ë—Ä—Ç–∫—É ```json ... ``` –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –æ–Ω–∞ –µ—Å—Ç—å
    text = re.sub(r"^```(?:json)?\s*|\s*```$", "", text)
    text = text.replace('""', '"')
    return text


def send_message(chat_id, text, reply_markup=None):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text, "parse_mode": "Markdown"}
    if reply_markup:
        payload["reply_markup"] = json.dumps(reply_markup)
    requests.post(url, json=payload)

def send_file(chat_id, file_path):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendDocument"
    with open(file_path, "rb") as f:
        requests.post(url, files={"document": f}, data={"chat_id": chat_id})

def download_file(file_id):
    file_info_url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getFile?file_id={file_id}"
    file_info = requests.get(file_info_url).json()
    file_path = file_info['result']['file_path']
    file_url = f"https://api.telegram.org/file/bot{TELEGRAM_BOT_TOKEN}/{file_path}"
    local_path = f"temp/{file_id}_{os.path.basename(file_path)}"
    os.makedirs("temp", exist_ok=True)
    with open(local_path, 'wb') as f:
        f.write(requests.get(file_url).content)
    return local_path

# ===================== –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç =====================

def create_or_get_thread(user_id):
    if user_id not in THREADS:
        thread = openai.beta.threads.create()
        THREADS[user_id] = thread.id
    return THREADS[user_id]

def send_to_assistant(user_id, content):
    try:
        messages = []

        expecting_json = False  # üí° –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç

        if isinstance(content, dict):
            if content.get("image_path"):
                with open(content["image_path"], "rb") as img:
                    base64_img = base64.b64encode(img.read()).decode("utf-8")
                messages.append({
                    "role": "user",
                    "content": [
                        {"type": "image_url", "image_url": {"url": f"data:image/png;base64,{base64_img}"}},
                        {"type": "text", "text": f"–û–ø—Ä–µ–¥–µ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –°–¢–†–û–ì–û –∏–∑ —Å–ø–∏—Å–∫–∞: {CATEGORIES} –∏ –æ–ø–∏—à–∏ –≤–µ—â—å. –í–µ—Ä–Ω–∏ JSON: {{\"–∫–∞—Ç–µ–≥–æ—Ä–∏—è\": \"...\", \"–æ–ø–∏—Å–∞–Ω–∏–µ\": \"...\"}} ‚ö†Ô∏è –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown-–æ–±—ë—Ä—Ç–∫—É ```json. –ü—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–∏ JSON."}
                    ]
                })
                expecting_json = True

            elif content.get("audio_path"):
                with open(content["audio_path"], "rb") as audio_file:
                    transcript = openai.audio.transcriptions.create(
                        model="whisper-1",
                        file=audio_file
                    )
                    messages.append({"role": "user", "content": transcript.text})

            else:
                raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –≤—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.")

        else:
            messages.append({"role": "user", "content": content})

        # GPT –í—ã–∑–æ–≤
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=messages,
            temperature=0.5,
            tools=[
                {
                    "type": "function",
                    "function": {
                        "name": "load_wardrobe",
                        "description": "–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–µ—â–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.",
                        "parameters": {
                            "type": "object",
                            "properties": {},
                        }
                    }
                }
            ],

            tool_choice="auto"
        )
        # üõ†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ tool call
        if response.choices[0].finish_reason == "tool_calls":
            for tool_call in response.choices[0].message.tool_calls:
                if tool_call.function.name == "load_wardrobe":
                    user_wardrobe = load_wardrobe()

                    if not user_wardrobe:
                        return "üß• –ì–∞—Ä–¥–µ—Ä–æ–± –ø–æ–∫–∞ –ø—É—Å—Ç."

                    response_text = "üëó *–¢–≤–æ–π –≥–∞—Ä–¥–µ—Ä–æ–±:*\n"
                    for category, items in user_wardrobe.items():
                        response_text += f"\n*{category}*\n"
                        for item in items:
                            response_text += f"‚Ä¢ {item}\n"
                    return response_text

        text = response.choices[0].message.content
        log_message(user_id, "assistant", text, event_type="ASSISTANT_REPLY")

        return clean_and_parse_json(text) if expecting_json else text

    except Exception as e:
        log_message(user_id, "error", str(e), event_type="ERROR")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT: {e}"


# ===================== Wardrobe =====================

def load_wardrobe():
    if not os.path.exists(WARDROBE_FILE):
        return {}
    try:
        with open(WARDROBE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è wardrobe.json: {e}")
        return {}
def load_wardrobe_from_tool_call(user_id, items):
    wardrobe = load_wardrobe()
    user_id = str(user_id)

    if user_id not in wardrobe:
        wardrobe[user_id] = {}

    for item in items:
        category = item["type"].upper()
        entry = f"{item['name']}, {item['color']}, —Ä–∞–∑–º–µ—Ä {item['size']}"

        if category not in wardrobe[user_id]:
            wardrobe[user_id][category] = []

        wardrobe[user_id][category].append(entry)

    save_wardrobe(wardrobe)
    return {"status": "ok", "message": f"{len(items)} items added to wardrobe"}


def save_wardrobe(data):
    try:
        with open(WARDROBE_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è wardrobe.json: {e}")

def add_item_to_wardrobe(user_id, category, description):
    wardrobe = load_wardrobe()
    user_id = str(user_id)
    category = category.capitalize()  # –∑–∞—â–∏—Ç–∞ –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –∏ "–ö–û–§–¢–ê"

    # üí° –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ-—Å–ª–æ–≤–∞—Ä—è
    if not isinstance(wardrobe, dict):
        wardrobe = {}

    if user_id not in wardrobe:
        wardrobe[user_id] = {}

    if category not in wardrobe[user_id]:
        wardrobe[user_id][category] = []

    wardrobe[user_id][category].append(description)
    save_wardrobe(wardrobe)

# ===================== Callback =====================

def process_callback(data, user_id, chat_id):
    action = data.get("data")
    if action == "wardrobe_add":
        user_state = PENDING_ACTIONS.get(user_id, {})
        item = user_state.get("data") if isinstance(user_state, dict) else None

        if item:
            try:
                category = item["–∫–∞—Ç–µ–≥–æ—Ä–∏—è"]
                description = item["–æ–ø–∏—Å–∞–Ω–∏–µ"]

                # üßº –ó–∞—â–∏—Ç–∞ –æ—Ç –º—É—Å–æ—Ä–∞
                if not isinstance(description, str) or not isinstance(category, str):
                    raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö (–∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Å—Ç—Ä–æ–∫–∞).")

                # üßº –û—á–∏—Å—Ç–∫–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                description = description.replace('\x00', '').replace('\n', ' ').strip()

                add_item_to_wardrobe(user_id, category, description)
                send_message(chat_id, "‚úÖ –í–µ—â—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≥–∞—Ä–¥–µ—Ä–æ–±!")

            except Exception as e:
                send_message(chat_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–µ—â—å: {e}")
                log_message(user_id, "error", f"wardrobe_add failed: {e}", event_type="ERROR")

        else:
            send_message(chat_id, "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞.")

        PENDING_ACTIONS.pop(user_id, None)
    elif action == "wardrobe_edit":
        send_message(chat_id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup={
            "inline_keyboard": [[
                {"text": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é", "callback_data": "edit_manual"},
                {"text": "–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "callback_data": "edit_retry"}
            ]]
        })
    elif action == "edit_retry":
        path = CACHED_PHOTOS.get(user_id)
        if path:
            raw = send_to_assistant(user_id, {"image_path": path})
            try:
                if not raw:
                    send_message(chat_id, "‚ö†Ô∏è –û—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π ‚Äî –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                    return

                print("ü™µ RAW before parsing:", raw)
                try:
                    item = clean_and_parse_json(raw)
                except Exception as e:
                    send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ JSON: {e}\n\nRAW: {raw}")
                    return
                PENDING_ACTIONS[user_id] = {"stage": "confirm_add", "data": item}
                send_message(chat_id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item['–∫–∞—Ç–µ–≥–æ—Ä–∏—è']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {item['–æ–ø–∏—Å–∞–Ω–∏–µ']}", reply_markup={
                    "inline_keyboard": [[
                        {"text": "–î–æ–±–∞–≤–∏—Ç—å –≤ –≥–∞—Ä–¥–µ—Ä–æ–±", "callback_data": "wardrobe_add"},
                        {"text": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "callback_data": "wardrobe_edit"}
                    ]]
                })
            except Exception as e:
                send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ JSON: {e}")

    elif action == "edit_manual":
        send_message(chat_id, "‚úçÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è:")

        if not isinstance(PENDING_ACTIONS.get(user_id), dict):
            PENDING_ACTIONS[user_id] = {"stage": "awaiting_manual_edit"}
        else:
            PENDING_ACTIONS[user_id]["stage"] = "awaiting_manual_edit"

# ===================== –ö–æ–º–∞–Ω–¥—ã =====================

COMMANDS_HELP = """
*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/addwardrobe ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤–µ—â—å –≤ –≥–∞—Ä–¥–µ—Ä–æ–±
(–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π —Ñ–æ—Ç–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ ‚Äî —è –≤—Å—ë –ø–æ–π–º—É üëóüé§)
""".strip()

# ===================== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ =====================

def process_command(msg, user_id, chat_id):
    username = msg["from"].get("username", "unknown")
    user_stage = PENDING_ACTIONS.get(user_id, {}).get("stage")

    # üì∏ –§–æ—Ç–æ
    if "photo" in msg:
        if user_stage == "awaiting_add_photo":
            file_id = msg["photo"][-1]["file_id"]
            local_path = download_file(file_id)
            CACHED_PHOTOS[user_id] = local_path

            raw = send_to_assistant(user_id, {"image_path": local_path})
            try:
                if isinstance(raw, str):
                    raw = raw.strip()
                    if raw.startswith('{') and raw.endswith('}'):
                        item = json.loads(raw)
                    else:
                        raise ValueError("–°—Ç—Ä–æ–∫–∞ –Ω–µ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ JSON.")
                elif isinstance(raw, dict):
                    item = raw
                else:
                    raise TypeError("–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")

                # ‚úÖ –í–ê–ñ–ù–û: –ø–µ—Ä–µ–Ω–æ—Å–∏–º —Å—é–¥–∞
                PENDING_ACTIONS[user_id] = {"stage": "confirm_add", "data": item}
                send_message(chat_id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item['–∫–∞—Ç–µ–≥–æ—Ä–∏—è']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {item['–æ–ø–∏—Å–∞–Ω–∏–µ']}", reply_markup={
                    "inline_keyboard": [[
                        {"text": "–î–æ–±–∞–≤–∏—Ç—å –≤ –≥–∞—Ä–¥–µ—Ä–æ–±", "callback_data": "wardrobe_add"},
                        {"text": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "callback_data": "wardrobe_edit"}
                    ]]
                })
                return

            except Exception as e:
                send_message(chat_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
        else:
            send_message(chat_id, "ü§ñ –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É `/addwardrobe`.")
        return

    # üé§ –ì–æ–ª–æ—Å
    if "voice" in msg:
        file_id = msg["voice"]["file_id"]
        local_path = download_file(file_id)
        raw = send_to_assistant(user_id, {"audio_path": local_path})
        send_message(chat_id, raw)
        return

    # üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    text = msg.get("text", "")
    if text == "/start":
        send_message(chat_id, COMMANDS_HELP)
    elif text == "/get_logs":
        if user_id == ADMIN_USER_ID:
            send_file(chat_id, LOG_FILE)
        else:
            send_message(chat_id, "‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–≥–∞–º.")
    elif text == "/addwardrobe":
        PENDING_ACTIONS[user_id] = {"stage": "awaiting_add_photo"}
        send_message(chat_id, "üì∏ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –≤–µ—â–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –≥–∞—Ä–¥–µ—Ä–æ–±.")
    elif user_stage == "awaiting_manual_edit":
        manual_text = text.strip()
        current = PENDING_ACTIONS.get(user_id)

        if isinstance(current, dict) and "data" in current:
            # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –µ—Å—Ç—å ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            if "–∫–∞—Ç–µ–≥–æ—Ä–∏—è" not in current["data"]:
                send_message(chat_id, "‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Ç–µ—Ä—è–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞.")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–ø–∏—Å–∞–Ω–∏–µ
            current["data"]["–æ–ø–∏—Å–∞–Ω–∏–µ"] = manual_text
            current["stage"] = "confirm_add"

            item = current["data"]
            send_message(chat_id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item['–∫–∞—Ç–µ–≥–æ—Ä–∏—è']}\n–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n{item['–æ–ø–∏—Å–∞–Ω–∏–µ']}", reply_markup={
                "inline_keyboard": [[
                    {"text": "–î–æ–±–∞–≤–∏—Ç—å –≤ –≥–∞—Ä–¥–µ—Ä–æ–±", "callback_data": "wardrobe_add"},
                    {"text": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "callback_data": "wardrobe_edit"}
                ]]
            })
        else:
            send_message(chat_id, "‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.")
    else:
        # üîê –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Ä—É—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if user_stage == "awaiting_manual_edit":
            manual_text = text.strip()
            current = PENDING_ACTIONS.get(user_id)

            if isinstance(current, dict) and "data" in current:
                if "–∫–∞—Ç–µ–≥–æ—Ä–∏—è" not in current["data"]:
                    send_message(chat_id, "‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Ç–µ—Ä—è–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞.")
                    return

                current["data"]["–æ–ø–∏—Å–∞–Ω–∏–µ"] = manual_text
                current["stage"] = "confirm_add"

                item = current["data"]
                send_message(chat_id, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item['–∫–∞—Ç–µ–≥–æ—Ä–∏—è']}\n–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n{item['–æ–ø–∏—Å–∞–Ω–∏–µ']}",
                             reply_markup={
                                 "inline_keyboard": [[
                                     {"text": "–î–æ–±–∞–≤–∏—Ç—å –≤ –≥–∞—Ä–¥–µ—Ä–æ–±", "callback_data": "wardrobe_add"},
                                     {"text": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "callback_data": "wardrobe_edit"}
                                 ]]
                             })
            else:
                send_message(chat_id, "‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.")
            return

        # üí¨ –õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∏–¥—ë—Ç –≤ GPT-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
        try:
            raw = send_to_assistant(user_id, text)
            if isinstance(raw, dict):
                formatted = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {raw.get('–∫–∞—Ç–µ–≥–æ—Ä–∏—è')}\n–û–ø–∏—Å–∞–Ω–∏–µ: {raw.get('–æ–ø–∏—Å–∞–Ω–∏–µ')}"
            else:
                formatted = str(raw)
            send_message(chat_id, formatted)
        except Exception as e:
            send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")

# ===================== –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª =====================

def polling_loop():
    global OFFSET
    while True:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getUpdates"
        params = {"timeout": 100, "offset": OFFSET}
        response = requests.get(url, params=params)
        data = response.json()

        for update in data.get("result", []):
            OFFSET = update["update_id"] + 1

            if "message" in update:
                msg = update["message"]
                chat_id = msg["chat"]["id"]
                user_id = msg["from"]["id"]
                username = msg["from"].get("username", "unknown")

                # üìÑ –õ–æ–≥–∏—Ä—É–µ–º –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è
                if "text" in msg:
                    log_message(user_id, username, msg["text"], event_type="USER_MESSAGE")
                elif "photo" in msg:
                    log_message(user_id, username, "[photo]", event_type="USER_MESSAGE")
                elif "voice" in msg:
                    log_message(user_id, username, "[voice]", event_type="USER_MESSAGE")
                else:
                    log_message(user_id, username, "[unknown message]", event_type="USER_MESSAGE")

                # üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É
                process_command(msg, user_id, chat_id)

            elif "callback_query" in update:
                data = update["callback_query"]
                user_id = data["from"]["id"]
                chat_id = data["message"]["chat"]["id"]
                username = data["from"].get("username", "unknown")
                callback_data = data.get("data", "[no data]")
                log_message(user_id, username, f"[callback] {callback_data}", event_type="CALLBACK")
                process_callback(data, user_id, chat_id)

        time.sleep(1)

if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling...")
    try:
        polling_loop()
    except Exception as e:
        log_message("SYSTEM", "error", str(e), event_type="ERROR")
        raise
